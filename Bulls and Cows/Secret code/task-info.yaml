type: edu
files:
- name: src/bullscows/Main.java
  visible: true
  text: |
    package bullscows;

    public class Main {
        public static void main(String[] args) {
            System.out.println("Hello World!");
        }
    }
  learner_created: false
- name: test/BullsCowsTest.java
  visible: false
  text: |-
    import bullscows.Main;
    import org.hyperskill.hstest.dynamic.input.DynamicTestingMethod;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testing.TestedProgram;

    import java.util.ArrayList;
    import java.util.Arrays;
    import java.util.LinkedHashSet;
    import java.util.List;
    import java.util.stream.Collectors;

    import static org.hyperskill.hstest.testing.expect.Expectation.expect;

    public class BullsCowsTest extends StageTest<String> {

        // basic test case
        @DynamicTestingMethod
        CheckResult test1() {
            TestedProgram main = new TestedProgram(Main.class);
            main.start();
            String output = main.execute("4").toLowerCase().trim();

            return outputCheck(output, 4);
        }

        @DynamicTestingMethod
        CheckResult test2() {
            TestedProgram main = new TestedProgram(Main.class);
            main.start();
            String output = main.execute("1").toLowerCase().trim();

            return outputCheck(output, 1);
        }

        // test of incorrect input
        @DynamicTestingMethod
        CheckResult test4() {
            TestedProgram main = new TestedProgram(Main.class);
            main.start();
            String output = main.execute("11").toLowerCase().trim();

            return outputCheck(output, 11);
        }

        @DynamicTestingMethod
        CheckResult test5() {
            TestedProgram main = new TestedProgram(Main.class);
            main.start();
            String output = main.execute("6").toLowerCase().trim();

            return outputCheck(output, 6);
        }

        @DynamicTestingMethod
        CheckResult test6() {
            TestedProgram main = new TestedProgram(Main.class);
            main.start();
            String output = main.execute("3").toLowerCase().trim();

            return outputCheck(output, 3);
        }


        CheckResult outputCheck(String source, int length) {

            if (length > 10) {
                if (source.toLowerCase().contains("error")) {
                    return CheckResult.correct();
                } else {
                    return CheckResult.wrong("An error message expected with input " +
                            "\"" + length + "\"");
                }
            }

            List<Integer> integers = expect(source).toContain(1).integers();
            source = "" + integers.get(0);

            if (source.length() != length) {
                return CheckResult.wrong("The output number of your program has " +
                        "an incorrect length (found " + source.length() + ")");
            }

            List<Integer> temp = stringToArrayOfNumbers(source);
            temp = new ArrayList<>(new LinkedHashSet<>(temp));

            if (temp.toArray().length != source.length()) {
                return CheckResult.wrong("Digits in the generated number are not unique.");
            }

            return CheckResult.correct();
        }

        private static List<Integer> stringToArrayOfNumbers(String array) {
            return Arrays.stream(array.split(""))
                    .map(Integer::parseInt)
                    .collect(Collectors.toList());
        }
    }
  learner_created: false
- name: src/bullscows/BullsCows.java
  visible: true
  text: |
    package bullscows;

    public class BullsCows {
        private final int number;
        private final String digits;
        int turn;

        GameState state;

        int answer;
        String answerDigits;
        int bulls;
        int cows;

        public BullsCows(int number) {
            this.state = GameState.NOT_FINISHED;
            this.number = number;
            this.digits = Integer.toString(number);
            this.turn = 0;
    //        System.out.println("\nThe secret code is prepared: ****.");
        }

        public void checkAnswer(int answer) {
            ++this.turn;
     //       System.out.println("\nTurn " + this.turn + ". Answer:");
            this.answer = answer;
            this.cows = 0;
            this.bulls = 0;
            this.answerDigits = Integer.toString(answer);
            bullsAndCowsCounting();
            printGrade();
            if (this.bulls == 4) {
                System.out.println("Congrats! The secret code is " + this.number + ".");
                this.state = GameState.FINISHED;
            }
        }

        private void bullsAndCowsCounting() {
            for (int i = 0; i < this.answerDigits.length(); i++) {
                if (answerDigits.charAt(i) == digits.charAt(i)) {
                    ++this.bulls;
                } else if (digits.contains(Character.toString(answerDigits.charAt(i)))) {
                    ++this.cows;
                }
            }
        }

        private void printGrade() {
            System.out.print("Grade: ");
            if (this.bulls > 0 || this.cows > 0) {
                System.out.print(printBullsMsg());
                System.out.print(!"".equals(printBullsMsg()) && !"".equals(printCowsMsg()) ? " and " : "");
                System.out.print(printCowsMsg());
    //            System.out.println(".");
                System.out.print("."); //
                System.out.println(" The secret code is " + this.number + "."); //

            } else {
                System.out.println("None.");
                System.out.println(" The secret code is " + this.number + ".");
            }
        }

        private String printBullsMsg() {
            if (this.bulls == 1) {
                return "1 bull";
            }
            if (this.bulls > 1) {
                return this.bulls + " bulls";
            }
            return "";
        }

        private String printCowsMsg() {
            if (this.cows == 1) {
                return "1 cow";
            }
            if (this.cows > 1) {
                return this.cows + " cows";
            }
            return "";
        }
    }
  learner_created: true
- name: src/bullscows/GameState.java
  visible: true
  text: |
    package bullscows;

    public enum GameState {
        NOT_FINISHED,
        FINISHED
    }
  learner_created: true
feedback_link: https://hyperskill.org/projects/53/stages/289/implement#comment
status: Solved
feedback:
  message: Congratulations!
  time: Mon, 25 Jan 2021 07:28:56 UTC
record: 3
